-- Creating the dataverse (database) + table (world)

CREATE DATAVERSE hw5;
USE hw5;

CREATE TYPE worldType AS {auto_id: uuid};

CREATE DATASET world(worldType) PRIMARY KEY auto_id AUTOGENERATED;

LOAD DATASET world using localfs(("path"="127.0.0.1:///Users/stephen/Desktop/UW/CSE 414/HW5/mondial.adm"),("format"="adm"));


-- Quesiton 1

USE hw5;

SELECT  cities.name
FROM world x, x.mondial.country y, y.province z,
CASE WHEN z.city is micsing THEN []
WHEN is_array(z.city) THEN z.city 
ELSE [z.city] END cities

WHERE y.name = 'Peru'

ORDER BY cities.name;


-- Question 2

USE hw5;

SELECT y.name as country_name, y.population as population_count, array_count(relig) as religion_count

FROM world x, x.mondial.country y

LET relig = CASE WHEN y.religions is micsing THEN []
WHEN is_array(y.religions) THEN y.religions
ELSE [y.religions] END

ORDER BY y.name;

-- Question 3

USE hw5

SELECT relig.`#text` AS religion, COUNT(*) AS country_count
FROM world x, x.mondial.country y, 
	CASE WHEN y.religions is micsing THEN []
		WHEN is_array(y.religions) THEN y.religions
		ELSE [y.religions] END relig
GROUP BY relig.`#text` AS religion_group
ORDER BY country_count DESC; 

-- Question 4

USE hw5

SELECT ethnic.`#text` AS ethnicity,
		SUM(float(y.population)/100 * float(ethnic.`-percentage`)) AS total_pop,
		COUNT(*) AS country_count
FROM world x, x.mondial.country y, 
	CASE WHEN y.ethnicgroups is micsing THEN []
		WHEN is_array(y.ethnicgroups ) THEN y.ethnicgroups
		ELSE [y.ethnicgroups] END ethnic
GROUP BY ethnic.`#text`;

-- Question 5

USE hw5

SELECT m.name AS mount_name, 
	m.height AS mount_height, 
	m.`-country` AS country_code, 
	c.name AS country_name
FROM world x, x.mondial.country c, x.mondial.mountain m, split(m.`-country`, " ") z
WHERE c.`-car_code` = z
ORDER BY m.height DESC;

-- Question 6

USE hw5

SELECT c.name as country_name, 
		c.`-car_code` AS country_code, 
		m AS mountain_list
FROM world x, x.mondial.country c
LET m = (
		 SELECT m.name AS mountain, m.height AS mountain_height
		 FROM world x2, x2.mondial.mountain m, split(m.`-country`," ") r
		 WHERE c.`-car_code` = r)
ORDER BY ARRAY_COUNT(m)
;

-- Question 7

USE hw5

SELECT c.name AS country_name, 
		c.`-car_code` AS country_code, 
		border AS border_seas
FROM world x, x.mondial.country c
LET border = (
		 SELECT s.name
		 FROM world x2, x2.mondial.sea s, split(s.`-country`," ") r
		 WHERE c.`-car_code` = r)
WHERE ARRAY_COUNT(border) >= 2
ORDER BY ARRAY_COUNT(border) DESC;

-- Question 8

USE hw5

SELECT c.name AS country_name,
		c.`-area` AS country_area
FROM world x, x.mondial.country c
LET sea = (
				SELECT s.name
		 FROM world x2, x2.mondial.sea s, split(s.`-country`," ") r
		 WHERE c.`-car_code` = r)
WHERE ARRAY_COUNT(sea) = 0
ORDER BY c.`-area` DESC;

-- Question 9 
-- Runtime: 587.942 sec

USE hw5;
SELECT DISTINCT c.name AS country1, 
				c2.name AS country2
FROM world x, 
	x.mondial.country c, 
	x.mondial.country c2,
	x.mondial.mountain m, 
	x.mondial.sea s,
	split(m.`-country`, " ") m1, 
	split(m.`-country`, " ") m2,
	split(s.`-country`, " ") s1,
	split(s.`-country`, " ") s2
WHERE m1 = c.`-car_code` 
	  AND m2 = c2.`-car_code`
	  AND s1 = c.`-car_code`
	  AND s2 = c2.`-car_code`
	  AND c.`-car_code` > c2.`-car_code` ;

-- Question 10 

-- Country Dataset

CREATE DATAVERSE hw5index

USE hw5index;
CREATE TYPE countryType AS OPEN {
    `-car_code`: string,
	`-area`: string,
	population: string
    };
CREATE DATASET country(countryType)
   PRIMARY KEY `-car_code`;
CREATE INDEX countryID ON country(`-car_code`) TYPE BTREE;
LOAD DATASET country using localfs(("path"="127.0.0.1:///Users/stephen/Desktop/UW/CSE 414/HW5/country.adm"),("format"="adm"));

-- Mountain Dataset

USE hw5index;
CREATE TYPE mountainType AS OPEN {
    `-id`: string,
	`-country`: string,
	auto_id: uuid
    };
CREATE DATASET mountain(mountainType)
	PRIMARY KEY auto_id AUTOGENERATED;
CREATE INDEX mountainID ON mountain(`-country`) TYPE KEYWORD;
LOAD DATASET mountain using localfs(("path"="127.0.0.1:///Users/stephen/Desktop/UW/CSE 414/HW5/mountain.adm"),("format"="adm"));

-- Sea Dataset

USE hw5index;
CREATE TYPE seaType AS OPEN {
    `-id`: string,
	`-country`: string,
	auto_id: uuid
    };
CREATE DATASET sea(seaType)
	PRIMARY KEY auto_id AUTOGENERATED;
CREATE INDEX seaID ON sea(`-country`) TYPE KEYWORD;
LOAD DATASET sea using localfs(("path"="127.0.0.1:///Users/stephen/Desktop/UW/CSE 414/HW5/sea.adm"),("format"="adm"));

-- Question 11 
-- Runtime: 0.455 sec

USE hw5index;
SELECT DISTINCT c.name AS country1, 
				c2.name AS country2
FROM mountain m,
	country c,
	country c2,
	sea s,
	split(m.`-country`, " ") m1, 
	split(m.`-country`, " ") m2,
	split(s.`-country`, " ") s1,
	split(s.`-country`, " ") s2
WHERE m1 = c.`-car_code` 
	  AND m2 = c2.`-car_code`
	  AND s1 = c.`-car_code`
	  AND s2 = c2.`-car_code`
	  AND c.`-car_code` > c2.`-car_code` ;

-- Question 12

USE hw5index;
SELECT DISTINCT c.name AS country1, 
				c2.name AS country2, 
				common_m as mountains, 
				common_s as seas
FROM country c,
	country c2,
	sea s,
	mountain m,
	split(m.`-country`, " ") m1, 
	split(m.`-country`, " ") m2,
	split(s.`-country`, " ") s1,
	split(s.`-country`, " ") s2
LET common_m = 
(
	SELECT cm.name AS m_name
	FROM mountain cm, 
		split(cm.`-country`, " ") cm1, 
		split(cm.`-country`, " ") cm2
	WHERE c.`-car_code` = cm1 
	  AND c2.`-car_code` = cm2
	  AND c.`-car_code` > c2.`-car_code`
	GROUP BY m_name
),
common_s = 
(
	SELECT cs.name AS s_name
	FROM sea cs, 
		split(cs.`-country`, " ") cs1, 
		split(cs.`-country`, " ") cs2
	WHERE c.`-car_code` = cs1 
		  AND c2.`-car_code` = cs2
		  AND c.`-car_code` > c2.`-car_code` 
	GROUP BY s_name
)
WHERE m1 = c.`-car_code` 
	  AND m2 = c2.`-car_code` 
	  AND s1 = c.`-car_code` 
	  AND s2 = c2.`-car_code`
	  AND c.`-car_code` > c2.`-car_code`;





